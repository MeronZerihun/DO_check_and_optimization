; ModuleID = 'LoopUnrollCorrectness_10.unroll.bc'
source_filename = "../../../Frontend/clang-plugins/clang-plugins-checker/test/LoopUnrollCorrectness.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.A = private unnamed_addr constant [40 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@__const.main.B = private unnamed_addr constant [40 x i32] [i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1], align 16
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: mustprogress noinline norecurse uwtable
define dso_local noundef i32 @main() #0 {
entry:
  %A = alloca [40 x i32], align 16
  %B = alloca [40 x i32], align 16
  %c = alloca [40 x i32], align 16
  %0 = bitcast [40 x i32]* %A to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([40 x i32]* @__const.main.A to i8*), i64 160, i1 false)
  %1 = bitcast [40 x i32]* %B to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1, i8* align 16 bitcast ([40 x i32]* @__const.main.B to i8*), i64 160, i1 false)
  %call = call i64 @clock() #4
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.02 = phi i32 [ 0, %entry ], [ %inc.9, %for.body ]
  %count.01 = phi i32 [ 0, %entry ], [ %add7.9, %for.body ]
  %idxprom = sext i32 %i.02 to i64
  %arrayidx = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %idxprom1 = sext i32 %i.02 to i64
  %arrayidx2 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1
  %3 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 %2, %3
  %idxprom3 = sext i32 %i.02 to i64
  %arrayidx4 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3
  store i32 %add, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i.02 to i64
  %arrayidx6 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5
  %4 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %count.01, %4
  %inc = add nuw nsw i32 %i.02, 1
  %idxprom.1 = sext i32 %inc to i64
  %arrayidx.1 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.1
  %5 = load i32, i32* %arrayidx.1, align 4
  %idxprom1.1 = sext i32 %inc to i64
  %arrayidx2.1 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.1
  %6 = load i32, i32* %arrayidx2.1, align 4
  %add.1 = add nsw i32 %5, %6
  %idxprom3.1 = sext i32 %inc to i64
  %arrayidx4.1 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.1
  store i32 %add.1, i32* %arrayidx4.1, align 4
  %idxprom5.1 = sext i32 %inc to i64
  %arrayidx6.1 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.1
  %7 = load i32, i32* %arrayidx6.1, align 4
  %add7.1 = add nsw i32 %add7, %7
  %inc.1 = add nuw nsw i32 %inc, 1
  %idxprom.2 = sext i32 %inc.1 to i64
  %arrayidx.2 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.2
  %8 = load i32, i32* %arrayidx.2, align 4
  %idxprom1.2 = sext i32 %inc.1 to i64
  %arrayidx2.2 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.2
  %9 = load i32, i32* %arrayidx2.2, align 4
  %add.2 = add nsw i32 %8, %9
  %idxprom3.2 = sext i32 %inc.1 to i64
  %arrayidx4.2 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.2
  store i32 %add.2, i32* %arrayidx4.2, align 4
  %idxprom5.2 = sext i32 %inc.1 to i64
  %arrayidx6.2 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.2
  %10 = load i32, i32* %arrayidx6.2, align 4
  %add7.2 = add nsw i32 %add7.1, %10
  %inc.2 = add nuw nsw i32 %inc.1, 1
  %idxprom.3 = sext i32 %inc.2 to i64
  %arrayidx.3 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.3
  %11 = load i32, i32* %arrayidx.3, align 4
  %idxprom1.3 = sext i32 %inc.2 to i64
  %arrayidx2.3 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.3
  %12 = load i32, i32* %arrayidx2.3, align 4
  %add.3 = add nsw i32 %11, %12
  %idxprom3.3 = sext i32 %inc.2 to i64
  %arrayidx4.3 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.3
  store i32 %add.3, i32* %arrayidx4.3, align 4
  %idxprom5.3 = sext i32 %inc.2 to i64
  %arrayidx6.3 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.3
  %13 = load i32, i32* %arrayidx6.3, align 4
  %add7.3 = add nsw i32 %add7.2, %13
  %inc.3 = add nuw nsw i32 %inc.2, 1
  %idxprom.4 = sext i32 %inc.3 to i64
  %arrayidx.4 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.4
  %14 = load i32, i32* %arrayidx.4, align 4
  %idxprom1.4 = sext i32 %inc.3 to i64
  %arrayidx2.4 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.4
  %15 = load i32, i32* %arrayidx2.4, align 4
  %add.4 = add nsw i32 %14, %15
  %idxprom3.4 = sext i32 %inc.3 to i64
  %arrayidx4.4 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.4
  store i32 %add.4, i32* %arrayidx4.4, align 4
  %idxprom5.4 = sext i32 %inc.3 to i64
  %arrayidx6.4 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.4
  %16 = load i32, i32* %arrayidx6.4, align 4
  %add7.4 = add nsw i32 %add7.3, %16
  %inc.4 = add nuw nsw i32 %inc.3, 1
  %idxprom.5 = sext i32 %inc.4 to i64
  %arrayidx.5 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.5
  %17 = load i32, i32* %arrayidx.5, align 4
  %idxprom1.5 = sext i32 %inc.4 to i64
  %arrayidx2.5 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.5
  %18 = load i32, i32* %arrayidx2.5, align 4
  %add.5 = add nsw i32 %17, %18
  %idxprom3.5 = sext i32 %inc.4 to i64
  %arrayidx4.5 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.5
  store i32 %add.5, i32* %arrayidx4.5, align 4
  %idxprom5.5 = sext i32 %inc.4 to i64
  %arrayidx6.5 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.5
  %19 = load i32, i32* %arrayidx6.5, align 4
  %add7.5 = add nsw i32 %add7.4, %19
  %inc.5 = add nuw nsw i32 %inc.4, 1
  %idxprom.6 = sext i32 %inc.5 to i64
  %arrayidx.6 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.6
  %20 = load i32, i32* %arrayidx.6, align 4
  %idxprom1.6 = sext i32 %inc.5 to i64
  %arrayidx2.6 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.6
  %21 = load i32, i32* %arrayidx2.6, align 4
  %add.6 = add nsw i32 %20, %21
  %idxprom3.6 = sext i32 %inc.5 to i64
  %arrayidx4.6 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.6
  store i32 %add.6, i32* %arrayidx4.6, align 4
  %idxprom5.6 = sext i32 %inc.5 to i64
  %arrayidx6.6 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.6
  %22 = load i32, i32* %arrayidx6.6, align 4
  %add7.6 = add nsw i32 %add7.5, %22
  %inc.6 = add nuw nsw i32 %inc.5, 1
  %idxprom.7 = sext i32 %inc.6 to i64
  %arrayidx.7 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.7
  %23 = load i32, i32* %arrayidx.7, align 4
  %idxprom1.7 = sext i32 %inc.6 to i64
  %arrayidx2.7 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.7
  %24 = load i32, i32* %arrayidx2.7, align 4
  %add.7 = add nsw i32 %23, %24
  %idxprom3.7 = sext i32 %inc.6 to i64
  %arrayidx4.7 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.7
  store i32 %add.7, i32* %arrayidx4.7, align 4
  %idxprom5.7 = sext i32 %inc.6 to i64
  %arrayidx6.7 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.7
  %25 = load i32, i32* %arrayidx6.7, align 4
  %add7.7 = add nsw i32 %add7.6, %25
  %inc.7 = add nuw nsw i32 %inc.6, 1
  %idxprom.8 = sext i32 %inc.7 to i64
  %arrayidx.8 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.8
  %26 = load i32, i32* %arrayidx.8, align 4
  %idxprom1.8 = sext i32 %inc.7 to i64
  %arrayidx2.8 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.8
  %27 = load i32, i32* %arrayidx2.8, align 4
  %add.8 = add nsw i32 %26, %27
  %idxprom3.8 = sext i32 %inc.7 to i64
  %arrayidx4.8 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.8
  store i32 %add.8, i32* %arrayidx4.8, align 4
  %idxprom5.8 = sext i32 %inc.7 to i64
  %arrayidx6.8 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.8
  %28 = load i32, i32* %arrayidx6.8, align 4
  %add7.8 = add nsw i32 %add7.7, %28
  %inc.8 = add nuw nsw i32 %inc.7, 1
  %idxprom.9 = sext i32 %inc.8 to i64
  %arrayidx.9 = getelementptr inbounds [40 x i32], [40 x i32]* %A, i64 0, i64 %idxprom.9
  %29 = load i32, i32* %arrayidx.9, align 4
  %idxprom1.9 = sext i32 %inc.8 to i64
  %arrayidx2.9 = getelementptr inbounds [40 x i32], [40 x i32]* %B, i64 0, i64 %idxprom1.9
  %30 = load i32, i32* %arrayidx2.9, align 4
  %add.9 = add nsw i32 %29, %30
  %idxprom3.9 = sext i32 %inc.8 to i64
  %arrayidx4.9 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom3.9
  store i32 %add.9, i32* %arrayidx4.9, align 4
  %idxprom5.9 = sext i32 %inc.8 to i64
  %arrayidx6.9 = getelementptr inbounds [40 x i32], [40 x i32]* %c, i64 0, i64 %idxprom5.9
  %31 = load i32, i32* %arrayidx6.9, align 4
  %add7.9 = add nsw i32 %add7.8, %31
  %inc.9 = add nuw nsw i32 %inc.8, 1
  %cmp.9 = icmp ult i32 %inc.9, 40
  br i1 %cmp.9, label %for.body, label %for.end, !llvm.loop !4

for.end:                                          ; preds = %for.body
  %count.0.lcssa = phi i32 [ %add7.9, %for.body ]
  %call8 = call i64 @clock() #4
  %call9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %count.0.lcssa)
  ret i32 0
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare dso_local i64 @clock() #2

declare dso_local i32 @printf(i8* noundef, ...) #3

attributes #0 = { mustprogress noinline norecurse uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nounwind willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.6 (https://github.com/llvm/llvm-project.git f28c006a5895fc0e329fe15fead81e37457cb1d1)"}
!4 = distinct !{!4, !5, !6}
!5 = !{!"llvm.loop.mustprogress"}
!6 = !{!"llvm.loop.unroll.disable"}
