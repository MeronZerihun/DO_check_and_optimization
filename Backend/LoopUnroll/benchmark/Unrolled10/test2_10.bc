; ModuleID = '../../../Frontend/clang-plugins/clang-plugins-checker/test/test2.cpp'
source_filename = "../../../Frontend/clang-plugins/clang-plugins-checker/test/test2.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%f \00", align 1

; Function Attrs: mustprogress noinline norecurse uwtable
define dso_local noundef i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %A = alloca [1000 x i64], align 16
  %B = alloca [1000 x i64], align 16
  %C = alloca [1000 x i64], align 16
  %D = alloca [1000 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %begin = alloca i64, align 8
  %temp = alloca i64, align 8
  %temp2 = alloca i64, align 8
  %temp3 = alloca i64, align 8
  %z = alloca i64, align 8
  %z2 = alloca i64, align 8
  %z3 = alloca i64, align 8
  %end = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  %call = call i64 @clock() #3
  store i64 %call, i64* %begin, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %conv = sext i32 %1 to i64
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [1000 x i64], [1000 x i64]* %A, i64 0, i64 %idxprom
  store i64 %conv, i64* %arrayidx, align 8
  %3 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %3, 2
  %conv1 = sext i32 %mul to i64
  %4 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %4 to i64
  %arrayidx3 = getelementptr inbounds [1000 x i64], [1000 x i64]* %B, i64 0, i64 %idxprom2
  store i64 %conv1, i64* %arrayidx3, align 8
  %5 = load i32, i32* %i, align 4
  %mul4 = mul nsw i32 %5, 3
  %conv5 = sext i32 %mul4 to i64
  %6 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %6 to i64
  %arrayidx7 = getelementptr inbounds [1000 x i64], [1000 x i64]* %C, i64 0, i64 %idxprom6
  store i64 %conv5, i64* %arrayidx7, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %7 to i64
  %arrayidx9 = getelementptr inbounds [1000 x i64], [1000 x i64]* %D, i64 0, i64 %idxprom8
  store i64 0, i64* %arrayidx9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !4

for.end:                                          ; preds = %for.cond
  call void @srand(i32 noundef 4) #3
  store i32 5, i32* %j, align 4
  store i32 15, i32* %k, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc85, %for.end
  %9 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %9, 1000000000
  br i1 %cmp11, label %for.body12, label %for.end87

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %10 to i64
  %arrayidx14 = getelementptr inbounds [1000 x i64], [1000 x i64]* %A, i64 0, i64 %idxprom13
  %11 = load i64, i64* %arrayidx14, align 8
  %mul15 = mul nsw i64 %11, 3
  %mul16 = mul nsw i64 %mul15, 29
  %div = sdiv i64 %mul16, 4
  %add = add nsw i64 %div, 23
  store i64 %add, i64* %temp, align 8
  %12 = load i32, i32* %k, align 4
  %idxprom17 = sext i32 %12 to i64
  %arrayidx18 = getelementptr inbounds [1000 x i64], [1000 x i64]* %B, i64 0, i64 %idxprom17
  %13 = load i64, i64* %arrayidx18, align 8
  %mul19 = mul nsw i64 %13, 7
  %mul20 = mul nsw i64 %mul19, 33
  %div21 = sdiv i64 %mul20, 3
  %add22 = add nsw i64 %div21, 59
  store i64 %add22, i64* %temp2, align 8
  %14 = load i64, i64* %temp, align 8
  %15 = load i64, i64* %temp2, align 8
  %add23 = add nsw i64 %14, %15
  %rem = srem i64 %add23, 1000
  %arrayidx24 = getelementptr inbounds [1000 x i64], [1000 x i64]* %C, i64 0, i64 %rem
  %16 = load i64, i64* %arrayidx24, align 8
  %17 = load i32, i32* %j, align 4
  %idxprom25 = sext i32 %17 to i64
  %arrayidx26 = getelementptr inbounds [1000 x i64], [1000 x i64]* %A, i64 0, i64 %idxprom25
  %18 = load i64, i64* %arrayidx26, align 8
  %add27 = add nsw i64 %16, %18
  %19 = load i32, i32* %k, align 4
  %idxprom28 = sext i32 %19 to i64
  %arrayidx29 = getelementptr inbounds [1000 x i64], [1000 x i64]* %B, i64 0, i64 %idxprom28
  %20 = load i64, i64* %arrayidx29, align 8
  %add30 = add nsw i64 %add27, %20
  store i64 %add30, i64* %temp3, align 8
  %21 = load i64, i64* %temp, align 8
  %mul31 = mul nsw i64 %21, 11
  %22 = load i64, i64* %temp2, align 8
  %mul32 = mul nsw i64 %22, 13
  %add33 = add nsw i64 %mul31, %mul32
  %23 = load i64, i64* %temp3, align 8
  %mul34 = mul nsw i64 %23, 17
  %add35 = add nsw i64 %add33, %mul34
  %24 = load i32, i32* %i, align 4
  %conv36 = sext i32 %24 to i64
  %add37 = add nsw i64 %add35, %conv36
  %25 = load i32, i32* %i, align 4
  %rem38 = srem i32 %25, 1000
  %idxprom39 = sext i32 %rem38 to i64
  %arrayidx40 = getelementptr inbounds [1000 x i64], [1000 x i64]* %D, i64 0, i64 %idxprom39
  store i64 %add37, i64* %arrayidx40, align 8
  %26 = load i32, i32* %i, align 4
  %cmp41 = icmp slt i32 %26, 100
  br i1 %cmp41, label %if.then, label %if.end84

if.then:                                          ; preds = %for.body12
  store i32 0, i32* %x, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc76, %if.then
  %27 = load i32, i32* %x, align 4
  %cmp43 = icmp slt i32 %27, 1000000
  br i1 %cmp43, label %for.body44, label %for.end78

for.body44:                                       ; preds = %for.cond42
  %28 = load i32, i32* %y, align 4
  %idxprom45 = sext i32 %28 to i64
  %arrayidx46 = getelementptr inbounds [1000 x i64], [1000 x i64]* %B, i64 0, i64 %idxprom45
  %29 = load i64, i64* %arrayidx46, align 8
  %mul47 = mul nsw i64 %29, 6
  %30 = load i32, i32* %y, align 4
  %idxprom48 = sext i32 %30 to i64
  %arrayidx49 = getelementptr inbounds [1000 x i64], [1000 x i64]* %C, i64 0, i64 %idxprom48
  %31 = load i64, i64* %arrayidx49, align 8
  %div50 = sdiv i64 %31, 2
  %add51 = add nsw i64 %mul47, %div50
  store i64 %add51, i64* %z, align 8
  %32 = load i64, i64* %z, align 8
  %rem52 = srem i64 %32, 1000
  %arrayidx53 = getelementptr inbounds [1000 x i64], [1000 x i64]* %A, i64 0, i64 %rem52
  %33 = load i64, i64* %arrayidx53, align 8
  %mul54 = mul nsw i64 2, %33
  %34 = load i32, i32* %y, align 4
  %idxprom55 = sext i32 %34 to i64
  %arrayidx56 = getelementptr inbounds [1000 x i64], [1000 x i64]* %B, i64 0, i64 %idxprom55
  %35 = load i64, i64* %arrayidx56, align 8
  %mul57 = mul nsw i64 4, %35
  %add58 = add nsw i64 %mul54, %mul57
  store i64 %add58, i64* %z2, align 8
  %36 = load i64, i64* %z2, align 8
  %rem59 = srem i64 %36, 1000
  %arrayidx60 = getelementptr inbounds [1000 x i64], [1000 x i64]* %C, i64 0, i64 %rem59
  %37 = load i64, i64* %arrayidx60, align 8
  %mul61 = mul nsw i64 6, %37
  %38 = load i32, i32* %y, align 4
  %idxprom62 = sext i32 %38 to i64
  %arrayidx63 = getelementptr inbounds [1000 x i64], [1000 x i64]* %A, i64 0, i64 %idxprom62
  %39 = load i64, i64* %arrayidx63, align 8
  %mul64 = mul nsw i64 %39, 3
  %add65 = add nsw i64 %mul61, %mul64
  store i64 %add65, i64* %z3, align 8
  %40 = load i64, i64* %z, align 8
  %41 = load i64, i64* %z2, align 8
  %add66 = add nsw i64 %40, %41
  %42 = load i64, i64* %z3, align 8
  %mul67 = mul nsw i64 %42, 2
  %add68 = add nsw i64 %add66, %mul67
  %43 = load i32, i32* %x, align 4
  %conv69 = sext i32 %43 to i64
  %add70 = add nsw i64 %add68, %conv69
  %44 = load i32, i32* %x, align 4
  %rem71 = srem i32 %44, 100
  %idxprom72 = sext i32 %rem71 to i64
  %arrayidx73 = getelementptr inbounds [1000 x i64], [1000 x i64]* %D, i64 0, i64 %idxprom72
  store i64 %add70, i64* %arrayidx73, align 8
  %45 = load i32, i32* %x, align 4
  %cmp74 = icmp slt i32 %45, 10
  br i1 %cmp74, label %if.then75, label %if.end

if.then75:                                        ; preds = %for.body44
  store i32 59, i32* %y, align 4
  br label %if.end

if.end:                                           ; preds = %if.then75, %for.body44
  br label %for.inc76

for.inc76:                                        ; preds = %if.end
  %46 = load i32, i32* %x, align 4
  %inc77 = add nsw i32 %46, 1
  store i32 %inc77, i32* %x, align 4
  br label %for.cond42, !llvm.loop !6

for.end78:                                        ; preds = %for.cond42
  %47 = load i32, i32* %i, align 4
  %cmp79 = icmp eq i32 %47, 0
  br i1 %cmp79, label %if.then80, label %if.else

if.then80:                                        ; preds = %for.end78
  %call81 = call i32 @rand() #3
  %rem82 = srem i32 %call81, 1000
  store i32 %rem82, i32* %j, align 4
  br label %if.end83

if.else:                                          ; preds = %for.end78
  store i32 37, i32* %k, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.else, %if.then80
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %for.body12
  br label %for.inc85

for.inc85:                                        ; preds = %if.end84
  %48 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %48, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond10, !llvm.loop !7

for.end87:                                        ; preds = %for.cond10
  %call88 = call i64 @clock() #3
  store i64 %call88, i64* %end, align 8
  %49 = load i64, i64* %end, align 8
  %50 = load i64, i64* %begin, align 8
  %sub = sub nsw i64 %49, %50
  %conv89 = sitofp i64 %sub to double
  %div90 = fdiv double %conv89, 1.000000e+06
  %call91 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double noundef %div90)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local i64 @clock() #1

; Function Attrs: nounwind
declare dso_local void @srand(i32 noundef) #1

; Function Attrs: nounwind
declare dso_local i32 @rand() #1

declare dso_local i32 @printf(i8* noundef, ...) #2

attributes #0 = { mustprogress noinline norecurse uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.6 (https://github.com/llvm/llvm-project.git f28c006a5895fc0e329fe15fead81e37457cb1d1)"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
