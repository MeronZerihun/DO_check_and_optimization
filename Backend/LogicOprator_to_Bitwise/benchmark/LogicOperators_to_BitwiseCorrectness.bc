; ModuleID = 'LogicOperators_to_BitwiseCorrectness.cpp'
source_filename = "LogicOperators_to_BitwiseCorrectness.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 !dbg !8 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %a, metadata !13, metadata !DIExpression()), !dbg !14
  store i32 0, i32* %a, align 4, !dbg !14
  call void @llvm.dbg.declare(metadata i32* %b, metadata !15, metadata !DIExpression()), !dbg !16
  store i32 -1, i32* %b, align 4, !dbg !16
  call void @llvm.dbg.declare(metadata i32* %c, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 10, i32* %c, align 4, !dbg !18
  call void @llvm.dbg.declare(metadata i32* %d, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 11, i32* %d, align 4, !dbg !20
  call void @llvm.dbg.declare(metadata i32* %x, metadata !21, metadata !DIExpression()), !dbg !22
  store i32 12, i32* %x, align 4, !dbg !22
  call void @llvm.dbg.declare(metadata i32* %y, metadata !23, metadata !DIExpression()), !dbg !24
  store i32 0, i32* %y, align 4, !dbg !24
  call void @llvm.dbg.declare(metadata i32* %z, metadata !25, metadata !DIExpression()), !dbg !26
  store i32 4, i32* %z, align 4, !dbg !26
  %0 = load i32, i32* %a, align 4, !dbg !27
  %1 = load i32, i32* %d, align 4, !dbg !29
  %cmp = icmp slt i32 %0, %1, !dbg !30
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !31

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %c, align 4, !dbg !32
  %3 = load i32, i32* %b, align 4, !dbg !33
  %cmp1 = icmp sge i32 %2, %3, !dbg !34
  br i1 %cmp1, label %if.then, label %if.else, !dbg !35

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %x, align 4, !dbg !36
  store i32 %4, i32* %y, align 4, !dbg !38
  br label %if.end, !dbg !39

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load i32, i32* %x, align 4, !dbg !40
  %add = add nsw i32 %5, 1, !dbg !42
  store i32 %add, i32* %y, align 4, !dbg !43
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %a, align 4, !dbg !44
  %7 = load i32, i32* %d, align 4, !dbg !46
  %cmp2 = icmp slt i32 %6, %7, !dbg !47
  %conv = zext i1 %cmp2 to i32, !dbg !48
  %8 = load i32, i32* %c, align 4, !dbg !49
  %9 = load i32, i32* %b, align 4, !dbg !50
  %cmp3 = icmp sge i32 %8, %9, !dbg !51
  %conv4 = zext i1 %cmp3 to i32, !dbg !52
  %and = and i32 %conv, %conv4, !dbg !53
  %tobool = icmp ne i32 %and, 0, !dbg !48
  br i1 %tobool, label %if.then5, label %if.else6, !dbg !54

if.then5:                                         ; preds = %if.end
  %10 = load i32, i32* %x, align 4, !dbg !55
  store i32 %10, i32* %y, align 4, !dbg !57
  br label %if.end8, !dbg !58

if.else6:                                         ; preds = %if.end
  %11 = load i32, i32* %x, align 4, !dbg !59
  %add7 = add nsw i32 %11, 1, !dbg !61
  store i32 %add7, i32* %y, align 4, !dbg !62
  br label %if.end8

if.end8:                                          ; preds = %if.else6, %if.then5
  %12 = load i32, i32* %a, align 4, !dbg !63
  %13 = load i32, i32* %d, align 4, !dbg !65
  %cmp9 = icmp slt i32 %12, %13, !dbg !66
  %conv10 = zext i1 %cmp9 to i32, !dbg !67
  %14 = load i32, i32* %c, align 4, !dbg !68
  %15 = load i32, i32* %b, align 4, !dbg !69
  %cmp11 = icmp sge i32 %14, %15, !dbg !70
  %conv12 = zext i1 %cmp11 to i32, !dbg !71
  %or = or i32 %conv10, %conv12, !dbg !72
  %tobool13 = icmp ne i32 %or, 0, !dbg !67
  br i1 %tobool13, label %if.then14, label %if.else15, !dbg !73

if.then14:                                        ; preds = %if.end8
  %16 = load i32, i32* %x, align 4, !dbg !74
  store i32 %16, i32* %y, align 4, !dbg !76
  br label %if.end17, !dbg !77

if.else15:                                        ; preds = %if.end8
  %17 = load i32, i32* %x, align 4, !dbg !78
  %add16 = add nsw i32 %17, 1, !dbg !80
  store i32 %add16, i32* %y, align 4, !dbg !81
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.then14
  %18 = load i32, i32* %y, align 4, !dbg !82
  %call = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 noundef %18), !dbg !83
  ret i32 0, !dbg !84
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8* noundef, ...) #2

attributes #0 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 14.0.6 (https://github.com/llvm/llvm-project.git f28c006a5895fc0e329fe15fead81e37457cb1d1)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "LogicOperators_to_BitwiseCorrectness.cpp", directory: "/n/eecs583b/home/teadem/583Project/new clone/DO_check_and_optimization/Backend/LogicOprator_to_Bitwise/benchmark", checksumkind: CSK_MD5, checksum: "96d54bb3398920dcd33ec0b610ca1263")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"uwtable", i32 1}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{!"clang version 14.0.6 (https://github.com/llvm/llvm-project.git f28c006a5895fc0e329fe15fead81e37457cb1d1)"}
!8 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
!9 = !DISubroutineType(types: !10)
!10 = !{!11}
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !{}
!13 = !DILocalVariable(name: "a", scope: !8, file: !1, line: 6, type: !11)
!14 = !DILocation(line: 6, column: 9, scope: !8)
!15 = !DILocalVariable(name: "b", scope: !8, file: !1, line: 6, type: !11)
!16 = !DILocation(line: 6, column: 15, scope: !8)
!17 = !DILocalVariable(name: "c", scope: !8, file: !1, line: 6, type: !11)
!18 = !DILocation(line: 6, column: 22, scope: !8)
!19 = !DILocalVariable(name: "d", scope: !8, file: !1, line: 6, type: !11)
!20 = !DILocation(line: 6, column: 29, scope: !8)
!21 = !DILocalVariable(name: "x", scope: !8, file: !1, line: 7, type: !11)
!22 = !DILocation(line: 7, column: 9, scope: !8)
!23 = !DILocalVariable(name: "y", scope: !8, file: !1, line: 7, type: !11)
!24 = !DILocation(line: 7, column: 14, scope: !8)
!25 = !DILocalVariable(name: "z", scope: !8, file: !1, line: 7, type: !11)
!26 = !DILocation(line: 7, column: 18, scope: !8)
!27 = !DILocation(line: 8, column: 9, scope: !28)
!28 = distinct !DILexicalBlock(scope: !8, file: !1, line: 8, column: 8)
!29 = !DILocation(line: 8, column: 13, scope: !28)
!30 = !DILocation(line: 8, column: 11, scope: !28)
!31 = !DILocation(line: 8, column: 15, scope: !28)
!32 = !DILocation(line: 8, column: 18, scope: !28)
!33 = !DILocation(line: 8, column: 23, scope: !28)
!34 = !DILocation(line: 8, column: 20, scope: !28)
!35 = !DILocation(line: 8, column: 8, scope: !8)
!36 = !DILocation(line: 9, column: 13, scope: !37)
!37 = distinct !DILexicalBlock(scope: !28, file: !1, line: 8, column: 26)
!38 = !DILocation(line: 9, column: 11, scope: !37)
!39 = !DILocation(line: 10, column: 5, scope: !37)
!40 = !DILocation(line: 12, column: 13, scope: !41)
!41 = distinct !DILexicalBlock(scope: !28, file: !1, line: 11, column: 9)
!42 = !DILocation(line: 12, column: 14, scope: !41)
!43 = !DILocation(line: 12, column: 11, scope: !41)
!44 = !DILocation(line: 20, column: 9, scope: !45)
!45 = distinct !DILexicalBlock(scope: !8, file: !1, line: 20, column: 8)
!46 = !DILocation(line: 20, column: 13, scope: !45)
!47 = !DILocation(line: 20, column: 11, scope: !45)
!48 = !DILocation(line: 20, column: 8, scope: !45)
!49 = !DILocation(line: 20, column: 17, scope: !45)
!50 = !DILocation(line: 20, column: 22, scope: !45)
!51 = !DILocation(line: 20, column: 19, scope: !45)
!52 = !DILocation(line: 20, column: 16, scope: !45)
!53 = !DILocation(line: 20, column: 15, scope: !45)
!54 = !DILocation(line: 20, column: 8, scope: !8)
!55 = !DILocation(line: 21, column: 13, scope: !56)
!56 = distinct !DILexicalBlock(scope: !45, file: !1, line: 20, column: 25)
!57 = !DILocation(line: 21, column: 11, scope: !56)
!58 = !DILocation(line: 22, column: 5, scope: !56)
!59 = !DILocation(line: 24, column: 13, scope: !60)
!60 = distinct !DILexicalBlock(scope: !45, file: !1, line: 23, column: 9)
!61 = !DILocation(line: 24, column: 14, scope: !60)
!62 = !DILocation(line: 24, column: 11, scope: !60)
!63 = !DILocation(line: 26, column: 9, scope: !64)
!64 = distinct !DILexicalBlock(scope: !8, file: !1, line: 26, column: 8)
!65 = !DILocation(line: 26, column: 13, scope: !64)
!66 = !DILocation(line: 26, column: 11, scope: !64)
!67 = !DILocation(line: 26, column: 8, scope: !64)
!68 = !DILocation(line: 26, column: 17, scope: !64)
!69 = !DILocation(line: 26, column: 22, scope: !64)
!70 = !DILocation(line: 26, column: 19, scope: !64)
!71 = !DILocation(line: 26, column: 16, scope: !64)
!72 = !DILocation(line: 26, column: 15, scope: !64)
!73 = !DILocation(line: 26, column: 8, scope: !8)
!74 = !DILocation(line: 27, column: 13, scope: !75)
!75 = distinct !DILexicalBlock(scope: !64, file: !1, line: 26, column: 25)
!76 = !DILocation(line: 27, column: 11, scope: !75)
!77 = !DILocation(line: 28, column: 5, scope: !75)
!78 = !DILocation(line: 30, column: 13, scope: !79)
!79 = distinct !DILexicalBlock(scope: !64, file: !1, line: 29, column: 9)
!80 = !DILocation(line: 30, column: 14, scope: !79)
!81 = !DILocation(line: 30, column: 11, scope: !79)
!82 = !DILocation(line: 32, column: 17, scope: !8)
!83 = !DILocation(line: 32, column: 5, scope: !8)
!84 = !DILocation(line: 33, column: 5, scope: !8)
